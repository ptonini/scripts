#!/bin/bash
set -e

INSTALL=true
CONFIGURE=true

UBUNTU_RELEASE=jammy
UBUNTU_VERSION=22.04
NODEJS_VERSION=20
MONGODB_VERSION=6.0

APT_PACKAGES=(curl vim jq nmap calibre flameshot cheese ncdu tuxtype git cpu-x flatpak remmina-* python3-pip golang-go lua5.1 luarocks
              apt-transport-https openssh-server bash-completion python3-gi libsqlite3-dev software-properties-common python3-gi-cairo
              libbz2-dev csvkit make build-essential smartmontools gconf-service chntpw liblzma-dev golang-src lsb-release gnupg-agent
              gconf2 libgconf-2-4 libssl-dev gnupg2 zlib1g-dev gir1.2-gtk-3.0 libreadline-dev libffi-dev libgdk-pixbuf2.0-0 dconf-editor)

PYTHON_PACKAGES=(
  pipenv
  ansible
  openstacksdk
  azure-cli
  checkov
)

DEB_PACKAGES=(
  "https://packages.microsoft.com/config/ubuntu/${UBUNTU_VERSION}/packages-microsoft-prod.deb"
  "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
)

CUSTOM_APT_REPOSITORIES=(
  "github-cli,https://cli.github.com/packages stable main,https://cli.github.com/packages/githubcli-archive-keyring.gpg"
  "azure,https://packages.microsoft.com/repos/azure-cli/ ${UBUNTU_RELEASE} main,https://packages.microsoft.com/keys/microsoft.asc"
  "google-chrome,https://dl.google.com/linux/chrome/deb/ stable main,https://dl.google.com/linux/linux_signing_key.pub"
  "google-cloud-packages,https://apt.kubernetes.io/ kubernetes-xenial main,https://packages.cloud.google.com/apt/doc/apt-key.gpg"
  "google-cloud-k8s,https://packages.cloud.google.com/apt cloud-sdk main,https://packages.cloud.google.com/apt/doc/apt-key.gpg"
  "helm,https://baltocdn.com/helm/stable/debian/ all main,https://baltocdn.com/helm/signing.asc"
  "mongodb,https://repo.mongodb.org/apt/ubuntu ${UBUNTU_RELEASE}/mongodb-org/${MONGODB_VERSION} multiverse,https://www.mongodb.org/static/pgp/server-${MONGODB_VERSION}.asc"
  "hashicorp,https://apt.releases.hashicorp.com ${UBUNTU_RELEASE} main,https://apt.releases.hashicorp.com/gpg"
  "docker,https://download.docker.com/linux/ubuntu ${UBUNTU_RELEASE} stable,https://download.docker.com/linux/ubuntu/gpg"
  "postgres,https://apt.postgresql.org/pub/repos/apt ${UBUNTU_RELEASE}-pgdg main,https://www.postgresql.org/media/keys/ACCC4CF8.asc"
  "pgadmin,https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/${UBUNTU_RELEASE} pgadmin4 main,https://www.pgadmin.org/static/packages_pgadmin_org.pub"
  "spotify,http://repository.spotify.com stable non-free,https://download.spotify.com/debian/pubkey_7A3A762FAFD4A51F.gpg"
  "virtualbox,https://download.virtualbox.org/virtualbox/debian ${UBUNTU_RELEASE} contrib,https://www.virtualbox.org/download/oracle_vbox_2016.asc"
  "yarn,https://dl.yarnpkg.com/debian stable main,https://dl.yarnpkg.com/debian/pubkey.gpg"
  "node,https://deb.nodesource.com/node_${NODEJS_VERSION}.x nodistro main,https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key"
  "lens,https://downloads.k8slens.dev/apt/debian stable main,https://downloads.k8slens.dev/keys/gpg"
)

CUSTOM_APT_PACKAGES=(spotify-client vault pgadmin4 postgresql-client-12 docker-ce nodejs mongodb-database-tools docker-compose terraform
                     azure-cli helm kubectl google-cloud-sdk powershell dotnet-sdk-6.0 mongodb-mongosh google-chrome-stable yarn gh lens
                     aztfexport aztfy virtualbox-7.0 vlt)

FLATPAKS=(
  com.github.IsmaelMartinez.teams_for_linux
  io.github.mimbrero.WhatsAppDesktop
  com.bitwarden.desktop
  com.mongodb.Compass
  com.github.micahflee.torbrowser-launcher
  com.slack.Slack
  com.getpostman.Postman
)

ANSIBLE_COLLECTIONS=(
  ansible.posix
  community.docker
  community.general
  amazon.aws
  openstack.cloud
  azure.azcollection
)

HELM_REPOSITORIES=(
  "ptonini,https://ptonini.github.io/helm-charts"
  "prometheus,https://prometheus-community.github.io/helm-charts"
  "elastic,https://helm.elastic.co"
  "eks,https://aws.github.io/eks-charts"
  "kong,https://charts.konghq.com"
  "external-dns,https://kubernetes-sigs.github.io/external-dns/"
  "stakater,https://stakater.github.io/stakater-charts"
  "jetstack,https://charts.jetstack.io"
  "secrets-store-csi-driver,https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts"
  "aws-secrets-manager,https://aws.github.io/secrets-store-csi-driver-provider-aws"
)

HELM_PLUGINS=(
 https://github.com/helm-unittest/helm-unittest
)

NPM_PACKAGES=(
  @vercel/ncc
  typescript
)

GIT_CONFIGURATION_OPTIONS=(
  "core.editor,vim"
  "core.autocrlf,input"
  "push.autoSetupRemote,true"
  "push.followTags,true"
  "init.defaultBranch,main"
)

### Installation #############################################################################################
if ${INSTALL}; then

  # APT Packages ######################
  sudo add-apt-repository -y ppa:git-core/ppa
  sudo add-apt-repository -y universe
  sudo apt-get install -y "${APT_PACKAGES[@]}"

  # Python packages ###################
  sudo pip3 install --disable-pip-version-check --no-warn-conflicts --upgrade pipenv "${PYTHON_PACKAGES[@]}"

  # DEB packages ######################
  for P in "${DEB_PACKAGES[@]}"; do
    ansible -i <(echo "{}") -b -o -m apt -a "deb=${P}" localhost
  done

  # APT Repositories ##################
  for R in "${CUSTOM_APT_REPOSITORIES[@]}"; do
    KEY="/usr/share/keyrings/$(echo "${R}"| cut -d, -f1)-archive-keyring.gpg"
    curl -fsSL "$(echo "${R}"| cut -d, -f3)" | gpg --dearmor | sudo tee "${KEY}" > /dev/null
    echo "deb [arch=amd64 signed-by=${KEY}] $(echo "${R}"| cut -d, -f2)" | sudo tee "/etc/apt/sources.list.d/$(echo "${R}"| cut -d, -f1).list"
  done
  sudo apt-get install -y "${CUSTOM_APT_PACKAGES[@]}"

  # NodeJS Packages ###################
  sudo npm install -g "${NPM_PACKAGES[@]}"
  sudo npm update -g

  # Ansible Galaxy ####################
  for U in "${ANSIBLE_COLLECTIONS[@]}"; do
    ansible-galaxy collection install --upgrade "${U}"
  done

  # Flatpaks ##########################
  sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  for F in "${FLATPAKS[@]}"; do
    flatpak install --noninteractive --or-update -y "${F}"
  done

  # Helm repositories #################
  for R in "${HELM_REPOSITORIES[@]}"; do
    helm repo add "$(echo "${R}"| cut -d, -f1)" "$(echo "${R}"| cut -d, -f2)"
  done
  helm repo update || true

  # Helm plugins #################
  for P in "${HELM_PLUGINS[@]}"; do
    helm plugin install "${P}" || true
  done

  # ZeroTier ##########################
  curl -fsSL https://install.zerotier.com | sudo bash || true

  # Rust ##############################
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y

  # Pyenv #############################
  "${HOME}/.pyenv/bin/pyenv" update || curl -fsSL https://pyenv.run | bash

  # Terragrunt ########################
  sudo wget -qO /usr/local/bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_386 && sudo chmod +x /usr/local/bin/terragrunt

  # Terracognita ######################
  wget -q https://github.com/cycloidio/terracognita/releases/latest/download/terracognita-linux-amd64.tar.gz -O - | sudo tar -xzvC /usr/local/bin/ --overwrite --transform='s/-linux-amd64//' -f - terracognita-linux-amd64

  # K9s ###############################
  wget -q https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz -O - | sudo tar -xzvC /usr/local/bin/ --overwrite -f - k9s

  # Kubelogin #########################
  wget -q https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip -O - | sudo busybox unzip -jo - bin/linux_amd64/kubelogin -d /usr/local/bin  && sudo chmod +x /usr/local/bin/kubelogin

  # Kind ##############################
  sudo wget -qO /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/latest/download/kind-linux-amd64

  # Tilt ##############################
  curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash

  # AWS CLI ###########################
  wget -q https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -O - | busybox unzip -od /tmp - && sudo bash /tmp/aws/install --update && rm -rf /tmp/aws

  # AWS Eksctl ########################
  wget -q https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz -O - | sudo tar -xzvC /usr/local/bin/ --overwrite -f - eksctl

  # Upgrade installed packages
  sudo apt-get upgrade -y

  # Clean up ##########################
  sudo apt-get clean
  sudo apt-get -y autoremove

fi

### Configuration ################################################################################################
if ${CONFIGURE}; then

  # Passwordless sudo #################
  echo "${USER} ALL=(ALL) NOPASSWD:ALL" | sudo tee "/etc/sudoers.d/${USER}"

  # System ############################
  sudo update-alternatives --set editor /usr/bin/vim.basic

  # Docker ############################
  sudo groupadd -f docker
  sudo usermod -aG docker "${USER}"

  # GIT ###############################
  for O in "${GIT_CONFIGURATION_OPTIONS[@]}"; do
    git config --global "$(echo "${O}" | cut -d, -f1)" "$(echo "${O}" | cut -d, -f2)"
  done

  # GitHub ############################
  gh config set git_protocol ssh -h github.com

  # Custom bashrc commands ############
  CUSTOM_BLOCK_HEAD="######## BEGIN CUSTOM COMMANDS ########"
  CUSTOM_BLOCK_TAIL="######### END CUSTOM COMMANDS #########"
  grep -qxF "${CUSTOM_BLOCK_HEAD}" "${HOME}/.bashrc" || printf "\n\n%s" "${CUSTOM_BLOCK_HEAD}" >> "${HOME}/.bashrc"
  grep -qxF "${CUSTOM_BLOCK_TAIL}" "${HOME}/.bashrc" || printf "\n%s" "${CUSTOM_BLOCK_TAIL}" >> "${HOME}/.bashrc"
  sed -i -ne "/${CUSTOM_BLOCK_HEAD}/ {p; r "<(cat <<- 'EOF'
		# Pyenv
		export PYENV_ROOT="$HOME/.pyenv"
		command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
		eval "$(pyenv init -)"

		# Activate venv
		[[ -f ./Pipfile ]] && pipenv shell
		[[ -f ./venv/bin/activate ]] && source ./venv/bin/activate

		# AWS
		complete -C "$(which aws_completer)" aws
		source <(eksctl completion bash)
		alias aws_login='aws sso login --sso-session'

    # Azure
    source /etc/bash_completion.d/azure-cli

		# Git
		alias git_init='git init && git add . && git commit -m "chore: first commit"'
		alias git_reset='rm -rf .git && git init'

		# Github
		export GH_TOKEN=$(cat "${HOME}/.github_token" 2> /dev/null)
		source <(gh completion --shell bash)
		alias gh_create_tf_mod='gh repo create ptonini/terraform-$(pwd | xargs basename) --public --source . --push && git push --tags'

		# Kubeconfig
		export KUBECONFIG=${HOME}/.kube/config:${HOME}/.kube/terraform
		source <(kubectl completion bash)

    # Vlt
    alias vlt_get_tfvars='source .vltrc && vlt secrets get -o "${ORGANIZATION}" -p "${PROJECT}" -a "${APP_NAME}" --plaintext tfvars | jq > terraform.tfvars.json'
    alias vlt_update_tfvars='source .vltrc && vlt secrets update -o "${ORGANIZATION}" -p "${PROJECT}" -a "${APP_NAME}" tfvars="$(cat terraform.tfvars.json)"'

		# Terraform
		alias tf='terraform'
		alias tf_fmt='terraform fmt -recursive'
		alias tf_unlock='terraform force-unlock -force'
		alias tf_apply='terraform apply plan && rm -f plan'
		alias tf_plan_refresh='tf_fmt && tf_get && terraform plan -parallelism=50 -out=plan'
		alias tf_plan='tf_plan_refresh -refresh=false'
		alias tf_reset='rm -vrf .terraform && terraform init'
		alias tf_reset_gcs_encrypted='tf_reset -backend-config=.encryption_key.gcs.tfbackend'

    # Terragrunt
    alias tg='terragrunt'
    alias tg_unlock='tg force-unlock -force'

		# Golang
		export GOPATH="$HOME/.go"
		export PATH="$GOPATH/bin:$PATH"

		# Lua
		export PATH="$HOME/.luarocks/bin:$PATH"

		# Kind
		source <(kind completion bash)

		# Tilt
		source <(tilt completion bash)

		# Rust
		source "$HOME/.cargo/env"
	EOF
	) -e ":a; n; /${CUSTOM_BLOCK_TAIL}/ {p; b}; ba}; p" "${HOME}/.bashrc"
fi